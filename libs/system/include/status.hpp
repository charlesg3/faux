#pragma once

#include <string>
#include <sstream>
#include <system/status.h>
#include <utilities/debug.h>

/**
 * @file status.hpp
 * @brief C++ wrappers for status codes and related exceptions.
 */

namespace fos
{
    /**
     * @brief Convenient synonym for status codes.
     */
    typedef FosStatus Status;

    namespace status
    {
//         /**
//          * @brief Generic fos exception.
//          */
//         class Exception
//         {
//         public:
//             virtual ~Exception {};
        
//             virtual std::string str() const = 0;
//         };

        /**
         * @brief An exception generated by a FosStatus error code.
         */
        class Exception
        {
        public:
            Exception(Status in_status) : m_status(in_status) {}

            inline std::string str() { std::stringstream ss; ss << "Status code : " << m_status << std::endl; return ss.str(); }
            inline Status status() const { return m_status; }

        private:
            Status m_status;
        };

        /**
         * @brief This function will throw a fos::Exception if the status
         * is not FOS_STATUS_OK.
         */
#if 0
#define check(__status)                                 \
        do {                                            \
            if (__status != FOS_MAILBOX_STATUS_OK) {    \
                PS("status : %d", __status);            \
                PS("backtrace : %d", *((int*)NULL));    \
            }                                           \
        } while(0)
#else
        inline void check(FosStatus status)
        {
            if (status != FOS_MAILBOX_STATUS_OK)
            {
                throw Exception(status);
            }
        }
#endif
    }
}
